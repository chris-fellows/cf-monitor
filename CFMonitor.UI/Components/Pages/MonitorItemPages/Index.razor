@page "/monitoritems"
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFMonitor.Interfaces
@using CFMonitor.Models
@using CFMonitor.Utilities
@using CFUtilities
@inject IMonitorAgentService MonitorAgentService
@inject IMonitorItemService MonitorItemService
@inject IMonitorItemOutputService MonitorItemOutputService
@inject IMonitorItemTypeService MonitorItemTypeService

@using System.IO
@inject IJSRuntime JS
@attribute [Authorize(Roles = "Administrator,User")]

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
    const arrayBuffer = await contentStreamReference.arrayBuffer();
    const blob = new Blob([arrayBuffer]);
    const url = URL.createObjectURL(blob);
    const anchorElement = document.createElement('a');
    anchorElement.href = url;
    anchorElement.download = fileName ?? '';
    anchorElement.click();
    anchorElement.remove();
    URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Index</PageTitle>

<h1>Monitor Item List</h1>

<p>
    <a href="monitoritems/create">Create New</a>
    <button @onclick="DownloadCSVAsync" class="btn btn-primary">Download</button>
</p>


@if (MonitorItemsQueryable == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Class="table" Items="@MonitorItemsQueryable" Pagination="@Pagination">        
        <TemplateColumn Title="Item" Context="monitorItem">
            <ImageAndText ImageSource="@(GetMonitorItemTypeImageSource(monitorItem))" Text="@monitorItem.Name" />
        </TemplateColumn>

        <PropertyColumn Title="Agents Good" Property="monitorItem => GetCountAgentsGood(monitorItem)" />
        <PropertyColumn Title="Agents Bad" Property="monitorItem => GetCountAgentsBad(monitorItem)" />

        <TemplateColumn Context="monitorItem">
            <a href="@($"monitoritems/edit?id={monitorItem.Id}")">Edit</a> |
            <a href="@($"monitoritems/details?id={monitorItem.Id}")">Details</a> |
            <a href="@($"monitoritems/delete?id={monitorItem.Id}")">Delete</a>
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@Pagination" />
}

@code {
    private IQueryable<MonitorItem>? MonitorItemsQueryable;

    private List<MonitorAgent> MonitorAgents = new();
    private List<MonitorItemType> MonitorItemTypes = new();

    private Dictionary<string, int> CountAgentsGoodByMonitorItemId = new();
    private Dictionary<string, int> CountAgentsBadKByMonitorItemId = new();

    private PaginationState Pagination = new PaginationState() { ItemsPerPage = 25 };

    private bool IsBusy { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        MonitorAgents = MonitorAgentService.GetAll();
        MonitorItemTypes = MonitorItemTypeService.GetAll();

        await RefreshMonitorItemsAsync();
    }

    private async Task RefreshMonitorItemsAsync()
    {
        IsBusy = true;

        MonitorItemsQueryable = MonitorItemService.GetAll().AsQueryable();

        await CountAgentsGoodAndBad();

        IsBusy = false;
    } 

    /// <summary>
    /// Counts agents good & bad for each monitor item
    /// </summary>
    /// <returns></returns>
    private Task CountAgentsGoodAndBad()
    {
        // Get latest monitor item outputs
        var monitorItemOutputFilter = new MonitorItemOutputFilter()
            {
                CheckedDateTimeFrom = DateTimeOffset.UtcNow.AddDays(-7),
                LatestOnly = true
            };
        var monitorItemOutputs = MonitorItemOutputService.GetByFilter(monitorItemOutputFilter);

        CountAgentsGoodByMonitorItemId.Clear();
        CountAgentsBadKByMonitorItemId.Clear();
        foreach (var monitorItem in MonitorItemsQueryable)
        {
            // Count good Monitor Agents
            var countGood = monitorItemOutputs.Count(mio => mio.MonitorItemId == monitorItem.Id && !mio.EventItemIdsForAction.Any());
            CountAgentsGoodByMonitorItemId.Add(monitorItem.Id, countGood);

            // Count bad Monitor Agents
            var countBad = monitorItemOutputs.Count(mio => mio.MonitorItemId == monitorItem.Id && mio.EventItemIdsForAction.Any());
            CountAgentsBadKByMonitorItemId.Add(monitorItem.Id, countBad);
        }

        return Task.CompletedTask;
    }

    private int GetCountAgentsGood(MonitorItem monitorItem)
    {
        return CountAgentsGoodByMonitorItemId[monitorItem.Id];
    }

    private int GetCountAgentsBad(MonitorItem monitorItem)
    {
        return CountAgentsBadKByMonitorItemId[monitorItem.Id];
    }

    private string GetMonitorItemTypeImageSource(MonitorItem monitorItem)
    {        
        return $"../images/monitor_item_types/{MonitorItemTypes.First(mit => mit.ItemType == monitorItem.MonitorItemType).ImageSource}";
    }

    private async Task DownloadCSVAsync()
    {
        // using (var session = new DisposableActionsSession())
        // {
        //     IsBusy = true;
        //     session.AddAction(() => IsBusy = false);

        //     // Get file stream
        //     var tempFile = Path.GetTempFileName();
        //     session.AddAction(() =>
        //     {
        //         if (File.Exists(tempFile)) File.Delete(tempFile);
        //     });

        //     var entityWriter = new CSVUserWriter(tempFile, (Char)9, System.Text.Encoding.UTF8);
        //     entityWriter.Write(UsersQueryable.ToList());
        //     var fileStream = File.OpenRead(tempFile);

        //     using var streamRef = new DotNetStreamReference(stream: fileStream);

        //     await JS.InvokeVoidAsync("downloadFileFromStream", "Users.txt", streamRef);
        // }
    }

    //@implements IAsyncDisposable
    //public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
