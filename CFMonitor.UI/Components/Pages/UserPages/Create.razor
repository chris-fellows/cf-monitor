@page "/users/create"
@using Microsoft.EntityFrameworkCore
@using CFMonitor.Constants
@using CFMonitor.Interfaces
@using CFMonitor.Models
@inject NavigationManager NavigationManager
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>User</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="User" OnValidSubmit="AddUser" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="mb-3">
                <label for="name" class="form-label">Name:</label>
                <InputText id="name" @bind-Value="User.Name" class="form-control" />
                <ValidationMessage For="() => User.Name" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="email" class="form-label">Email:</label>
                <InputText id="email" @bind-Value="User.Email" class="form-control" />
                <ValidationMessage For="() => User.Email" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="active" class="form-label">Active:</label>
                <InputCheckbox id="active" @bind-Value="User.Active" class="form-check-input" />
                <ValidationMessage For="() => User.Active" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/users">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private User User { get; set; } = new();

    // To protect from overposting attacks, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task AddUser()
    {
        User.Id = Guid.NewGuid().ToString();

        UserService.Add(User);

        //using var context = DbFactory.CreateDbContext();
        //context.User.Add(User);
        //await context.SaveChangesAsync();

        // Send email
        //await AddAuditEventUserCreatedAsync(User.Id);

        NavigationManager.NavigateTo("/users");
    }   
}
