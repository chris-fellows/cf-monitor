@page "/resetpassword"
@using CFMonitor.Constants
@using CFMonitor.Models
@using CFMonitor.Interfaces
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authentication.Cookies
@using System.Security.Claims

@inject NavigationManager NavigationManager
@inject IAuditEventFactory AuditEventFactory
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IPasswordResetService PasswordResetService
@inject IPasswordService PasswordService
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

<div clsss="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <EditForm Model="@Model" OnValidSubmit="UpdatePassword" FormName="ResetPasswordForm">
            <DataAnnotationsValidator />
            <div class="mb-3 text-center flex-column">
                <img src="/images/avatar.png" style="max-height:5rem;" />
                <h3>Reset Passowrd</h3>
            </div>
            <div class="mb-3">
                <label>Username</label>
                <InputText @bind-Value="Model.Username" class="form-control" placeholder="Username" />
                <ValidationMessage For="() => Model.Username" />
            </div>
            <div class="mb-3">
                <label>Enter New Password</label>
                <InputText @bind-Value="Model.Password" class="form-control" placeholder="Password" type="password" />
                <ValidationMessage For="() => Model.Password" />
            </div>
            <div class="mb-3 text-center">
                <span class="text-danger">@ErrorMessage</span>
            </div>
            <div class="mb-3 d-grid gap-2">
                <button type="submit" class="btn btn-primary">Log in</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [CascadingParameter]
    public HttpContext? HttpContext { get; set; }

    [SupplyParameterFromQuery]
    private string Id { get; set; }

    [SupplyParameterFromQuery]
    private string ValidationId { get; set; }

    [SupplyParameterFromForm]
    public LoginCredentials Model { get; set; } = new();

    private string? ErrorMessage;

    private PasswordReset? PasswordReset { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Get password reset
        var PasswordReset = await PasswordResetService.GetByIdAsync(Id);

        if (PasswordReset == null ||
            PasswordReset.ValidationId != ValidationId ||
            PasswordReset.ExpiresDateTime <= DateTimeOffset.UtcNow)
        {
            ErrorMessage = "The link is invalid";
        }
        else
        {
            // Get user
            var user = await UserService.GetByIdAsync(PasswordReset.UserId);

            Model.Username = user.Email;
        }
    }

    private async Task UpdatePassword()
    {
        if (PasswordReset == null)
        {
            ErrorMessage = "The link is invalid";
        }
        else if (!PasswordService.IsAllowed(Model.Password))
        {
            ErrorMessage = "Password is not allowed";
        }
        else
        {
            // Update password
            var user = await UserService.GetByIdAsync(PasswordReset.UserId);

            // Encrypt password
            var encrypted = PasswordService.Encrypt(Model.Password);
            user.Password = encrypted[0];
            user.Salt = encrypted[1];
            await UserService.UpdateAsync(user);

            // Delete password reset
            await PasswordResetService.DeleteByIdAsync(PasswordReset.Id);

            // Add audit event
            await AddAuditEventPasswordUpdatedAsync(user.Id);

            // Open login page
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task AddAuditEventPasswordUpdatedAsync(string userId)
    {
        var auditEvent = AuditEventFactory.CreatePasswordUpdated(userId, userId);
        await AuditEventService.AddAsync(auditEvent);
    }
}
