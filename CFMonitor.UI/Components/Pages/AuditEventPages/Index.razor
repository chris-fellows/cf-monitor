@page "/auditevents"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using CFMonitor.Constants
@using CFMonitor.Enums
@using CFMonitor.EntityWriter
@using CFMonitor.Interfaces
@using CFMonitor.Models
@using CFMonitor.Utilities
@using CFMonitor.UI.Utilities
@using CFUtilities
@using CFUtilities.Utilities
@inject IAuditEventService AuditEventService
@inject IAuditEventTypeService AuditEventTypeService
@inject IMonitorAgentService MonitorAgentService
@inject IMonitorItemService MonitorItemService
@inject IMonitorItemOutputService MonitorItemOutputService
@inject IMonitorItemTypeService MonitorItemTypeService
@inject ISystemValueTypeService SystemValueTypeService
@inject IUserService UserService

@using System.IO
@inject IJSRuntime JS

@rendermode InteractiveServer
@attribute [StreamRendering]
@attribute [Authorize(Roles = "Administrator,User")]

<script>
    window.downloadFileFromStream = async (fileName, contentStreamReference) =>
    {
        const arrayBuffer = await contentStreamReference.arrayBuffer();
        const blob = new Blob([arrayBuffer]);
        const url = URL.createObjectURL(blob);
        const anchorElement = document.createElement('a');
        anchorElement.href = url;
        anchorElement.download = fileName ?? '';
        anchorElement.click();
        anchorElement.remove();
        URL.revokeObjectURL(url);
    }
</script>

<PageTitle>Index</PageTitle>

<h1>Audit Event List</h1>

<ActivityIndicator IsBusy="@IsBusy" />

<p>
    <a href="auditevents/create">Create New</a>
    <button @onclick="DownloadCSVAsync" class="btn btn-primary">Download</button>
    <button @onclick="ResetFiltersAsync" class="btn btn-primary">Reset Filters</button>

    <br />
    <div style="display: inline-block">       
        <label for="auditeventtypeid">Type:</label>
        <InputSelect @bind-Value="@FilterAuditEventTypeId">
            @foreach (AuditEventType auditEventType in AuditEventTypes)
            {
                <option value="@auditEventType.Id">@auditEventType.Name</option>
            }
        </InputSelect>     

        <label for="createdate">Created Time:</label>
        <InputSelect @bind-Value="@FilterCreatedDateRangeId">
            @foreach (DateRangeFilter dateRangeFilter in CreatedDateRangeFilters)
            {
                <option value="@dateRangeFilter.Id">@dateRangeFilter.Name</option>
            }
        </InputSelect>
    </div>
</p>

@if (AuditEventsQueryable == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <QuickGrid Class="table" Items="@AuditEventsQueryable" Pagination="@Pagination">
        <PropertyColumn Title="Created Time" Property="auditevent => auditevent.CreatedDateTime" />        

        <TemplateColumn Title="Type" Context="auditevent">
            <ImageAndText ImageSource="@(GetAuditEventTypeImageSource(auditevent))" Text="@(GetAuditEventTypeName(auditevent))" />
        </TemplateColumn>

        <TemplateColumn Title="User" Context="auditevent">
            <ImageAndText ImageSource="@(GetUserImageSource(auditevent))" Text="@(GetUserName(auditevent))" />
        </TemplateColumn>

        <TemplateColumn Title="User" Context="auditevent">
            <ImageAndContent ImageSource="@(GetUserImageSource(auditevent))"><a href="@($"users/details?id={GetUserId(auditevent)}")">@(GetUserName(auditevent))</a></ImageAndContent>
        </TemplateColumn>

        <TemplateColumn Title="Monitor Agent" Context="auditevent">
            <a href="@($"monitoragents/details?id={GetMonitorAgentId(auditevent)}")">@($"{GetMonitorAgentMachineName(auditevent)}")</a>
        </TemplateColumn>

        <TemplateColumn Title="Monitor Item" Context="auditevent">
            <ImageAndText ImageSource="@(GetMonitorItemTypeImageSource(auditevent))" Text="@(GetMonitorItemName(auditevent))" />
        </TemplateColumn>
        
        <TemplateColumn Context="auditevent">        
            <a href="@($"auditevents/details?id={auditevent.Id}")">Details</a>        
        </TemplateColumn>
    </QuickGrid>

    <Paginator State="@Pagination" />
}

@code {
    private List<AuditEventType> AuditEventTypes = new();
    private List<MonitorAgent> MonitorAgents = new();
    private List<MonitorItem> MonitorItems = new();
    private List<MonitorItemType> MonitorItemTypes = new();
    private List<SystemValueType> SystemValueTypes = new();
    private List<User> Users = new();

    private PaginationState Pagination = new PaginationState() { ItemsPerPage = ConfigUtilities.ItemsPerListPage };

    private IQueryable<AuditEvent>? AuditEventsQueryable;

    private List<DateRangeFilter> CreatedDateRangeFilters = new(); 

    private bool IsBusy { get; set; }

    // Filter on issue status
    private string _filterAuditEventTypeId = UIUtilities.AnyId;
    public string FilterAuditEventTypeId
    {
        get { return _filterAuditEventTypeId; }
        set
        {
            if (_filterAuditEventTypeId != value)
            {
                _filterAuditEventTypeId = value;
                RefreshAuditEvents();
            }
        }
    }

    // Filter on created
    private string _filterCreatedDateRangeId = String.Empty;
    public string FilterCreatedDateRangeId
    {
        get { return _filterCreatedDateRangeId; }
        set
        {
            if (_filterCreatedDateRangeId != value)
            {
                _filterCreatedDateRangeId = value;
                RefreshAuditEvents();
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsBusy = true;

        AuditEventTypes = AuditEventTypeService.GetAll();
        MonitorAgents = MonitorAgentService.GetAll();
        MonitorItems = MonitorItemService.GetAll();
        MonitorItemTypes = MonitorItemTypeService.GetAll();
        SystemValueTypes = SystemValueTypeService.GetAll();
        Users = UserService.GetAll();

        CreatedDateRangeFilters = UIUtilities.GetDateRangeFilters();
        _filterCreatedDateRangeId = CreatedDateRangeFilters.First().Id;

        // Add Any option
        UIUtilities.AddAny(AuditEventTypes);

        RefreshAuditEvents();
    }

    private string GetUserId(AuditEvent auditEvent)
    {
        return Users.First(u => u.Id == auditEvent.CreatedUserId).Id; ;
    }

    private string GetUserName(AuditEvent auditEvent)
    {
        return Users.First(u => u.Id == auditEvent.CreatedUserId).Name;        ;
    }

    private string GetUserImageSource(AuditEvent auditEvent)
    {
        return $"../images/users/{Users.First(t => t.Id == auditEvent.CreatedUserId).ImageSource}";
    }

    private string GetAuditEventTypeName(AuditEvent auditEvent)
    {
        return AuditEventTypes.First(t => t.Id == auditEvent.TypeId).Name;
    }

    private string GetAuditEventTypeImageSource(AuditEvent auditEvent)
    {
        return $"../images/audit_event_types/{AuditEventTypes.First(t => t.Id == auditEvent.TypeId).ImageSource}";
    }  

    private string GetMonitorItemTypeImageSource(AuditEvent auditEvent)
    {
        var monitorItem = GetMonitorItem(auditEvent);

        if (monitorItem == null)
        {
            var monitorItemOutput = GetMonitorItemOutput(auditEvent);
            if (monitorItemOutput != null)
            {
                monitorItem = MonitorItems.First(ma => ma.Id == monitorItemOutput.MonitorItemId);
            }
        }

        return monitorItem == null ? "" :
            $"../images/monitor_item_types/{MonitorItemTypes.First(mit => mit.ItemType == monitorItem.MonitorItemType).ImageSource}";
    }

    private string GetMonitorAgentId(AuditEvent auditEvent)
    {
        var monitorAgent = GetMonitorAgent(auditEvent);

        if (monitorAgent == null)
        {
            var monitorItemOutput = GetMonitorItemOutput(auditEvent);
            if (monitorItemOutput != null)
            {
                monitorAgent = MonitorAgents.First(ma => ma.Id == monitorItemOutput.MonitorAgentId);
            }
        }

        return monitorAgent == null ? "" : monitorAgent.Id;
    }

    private string GetMonitorAgentMachineName(AuditEvent auditEvent)
    {
        var monitorAgent = GetMonitorAgent(auditEvent);

        if (monitorAgent == null)
        {
            var monitorItemOutput = GetMonitorItemOutput(auditEvent);
            if (monitorItemOutput != null)
            {
                monitorAgent = MonitorAgents.First(ma => ma.Id == monitorItemOutput.MonitorAgentId);
            }
        }

        return monitorAgent == null ? "" : monitorAgent.MachineName;
    }

    private string GetMonitorItemId(AuditEvent auditEvent)
    {
        var monitorItem = GetMonitorItem(auditEvent);

        if (monitorItem == null)
        {
            var monitorItemOutput = GetMonitorItemOutput(auditEvent);
            if (monitorItemOutput != null)
            {
                monitorItem = MonitorItems.First(ma => ma.Id == monitorItemOutput.MonitorItemId);
            }
        }

        return monitorItem == null ? "" : monitorItem.Id; 
    }

    private string GetMonitorItemName(AuditEvent auditEvent)
    {
        var monitorItem = GetMonitorItem(auditEvent);

        if (monitorItem == null)
        {
            var monitorItemOutput = GetMonitorItemOutput(auditEvent);
            if (monitorItemOutput != null)
            {
                monitorItem = MonitorItems.First(ma => ma.Id == monitorItemOutput.MonitorItemId);
            }
        }

        return monitorItem == null ? "" : monitorItem.Name;
    }

    private MonitorAgent? GetMonitorAgent(AuditEvent auditEvent)
    {
        var systemValueTypeMonitorAgentId = SystemValueTypes.First(svt => svt.ValueType == CFMonitor.Enums.SystemValueTypes.AEP_MonitorAgentId);

        var parameterMonitorAgentId = auditEvent.Parameters.FirstOrDefault(p => p.SystemValueTypeId == systemValueTypeMonitorAgentId.Id);

        MonitorAgent? monitorAgent = parameterMonitorAgentId != null ?
                            MonitorAgents.First(mi => mi.Id == parameterMonitorAgentId.Value) : null;

        return monitorAgent;
    }

    private MonitorItemOutput? GetMonitorItemOutput(AuditEvent auditEvent)
    {
        var systemValueTypeMonitorItemOutputId = SystemValueTypes.First(svt => svt.ValueType == CFMonitor.Enums.SystemValueTypes.AEP_MonitorItemOutputId);
        var parameterMonitorItemOutputId = auditEvent.Parameters.FirstOrDefault(p => p.SystemValueTypeId == systemValueTypeMonitorItemOutputId.Id);

        MonitorItemOutput? monitorItemOutput = parameterMonitorItemOutputId != null ?
                            MonitorItemOutputService.GetByIdAsync(parameterMonitorItemOutputId.Value).Result : null;

        return monitorItemOutput;                           
    }

    private MonitorItem? GetMonitorItem(AuditEvent auditEvent)
    {
        var systemValueTypeMonitorItemId = SystemValueTypes.First(svt => svt.ValueType == CFMonitor.Enums.SystemValueTypes.AEP_MonitorItemId);     

        var parameterMonitorItemId = auditEvent.Parameters.FirstOrDefault(p => p.SystemValueTypeId == systemValueTypeMonitorItemId.Id);        

        MonitorItem? monitorItem = parameterMonitorItemId != null ?
                            MonitorItems.First(mi => mi.Id == parameterMonitorItemId.Value) : null;   
       
        return monitorItem;
    }


    private void RefreshAuditEvents()
    {
        IsBusy = true;

        // Get audit events
        AuditEventsQueryable = (AuditEventService.GetByFilter(GetAuditEventFilter()))
                    .OrderBy(e => e.CreatedDateTime)
                    .AsQueryable();
  

        IsBusy = false;

        //if (notifyStateHasChanged) StateHasChanged();
    }

    private AuditEventFilter GetAuditEventFilter()
    {
        var createdDateRange = this.CreatedDateRangeFilters.First(f => f.Id == FilterCreatedDateRangeId);

        // Set filter
        var auditEventFilter = new AuditEventFilter()
            {
                CreatedDateTimeFrom = createdDateRange.FromDate == DateTimeOffset.MinValue ? null : createdDateRange.FromDate,
                CreatedDateTimeTo = createdDateRange.ToDate == DateTimeOffset.MaxValue ? null :  createdDateRange.ToDate,                
                AuditEventTypeIds = (FilterAuditEventTypeId == UIUtilities.AnyId ? null : new() { FilterAuditEventTypeId }),                
            };
        return auditEventFilter;
    }

    private async Task DownloadCSVAsync()
    {        
        using (var session = new DisposableActionsSession())
        {
            IsBusy = true;
            session.AddAction(() => IsBusy = false);

            // Get file stream
            var tempFile = Path.GetTempFileName();
            session.AddAction(() =>
            {
                if (File.Exists(tempFile)) File.Delete(tempFile);
            });

            var entityWriter = new CSVAuditEventWriter(tempFile, (Char)9, System.Text.Encoding.UTF8, 
                                                    AuditEventTypeService);

            entityWriter.Write(AuditEventsQueryable.ToList());
            var fileStream = File.OpenRead(tempFile);

            using var streamRef = new DotNetStreamReference(stream: fileStream);

            await JS.InvokeVoidAsync("downloadFileFromStream", "AuditEvents.txt", streamRef);
        }
    }

    private async Task ResetFiltersAsync()
    {
        _filterCreatedDateRangeId = CreatedDateRangeFilters.First().Id;        
        _filterAuditEventTypeId = UIUtilities.AnyId;        

        RefreshAuditEvents();
    }    

    //public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
